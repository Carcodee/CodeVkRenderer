#version 450

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout :enable

#include "../Utils/uStructs.glsl"
#include "../Utils/uMath.glsl"
#include "../Utils/uRendering.glsl"

layout (set = 0, binding = 0, scalar) writeonly buffer IndirectCmds{
    u_DrawIndirectIndexedCmd[] indirectCmds;
};
layout (set = 0, binding = 1, scalar) buffer MeshesSpheres{
    u_Sphere[] meshesSpheres;
};
layout(set = 0, binding = 2, scalar) uniform CamProps{
    mat4 invProj;
    mat4 invView;
    vec3 camPos;
    float zNear;
    float zFar;
}cProps;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main(){
    vec3 nearTopL =  u_ScreenToViewNDC(cProps.invProj, 0.0,vec2(-1.0, 1.0)).xyz;
    vec3 nearTopR= u_ScreenToViewNDC(cProps.invProj, 0.0, vec2(1.0, 1.0)).xyz;
    vec3 nearBottomL = u_ScreenToViewNDC(cProps.invProj, 0.0,vec2(-1.0, -1.0)).xyz;
    vec3 nearBottomR = u_ScreenToViewNDC(cProps.invProj, 0.0,vec2(1.0, -1.0)).xyz;

    vec3 farTopL = u_ScreenToViewNDC(cProps.invProj, 1.0, vec2(-1.0, 1.0)).xyz;
    vec3 farTopR = u_ScreenToViewNDC(cProps.invProj, 1.0, vec2(1.0, 1.0)).xyz;
    vec3 farBottomL = u_ScreenToViewNDC(cProps.invProj, 1.0, vec2(-1.0, -1.0)).xyz;
    vec3 farBottomR = u_ScreenToViewNDC(cProps.invProj, 1.0, vec2(1.0, -1.0)).xyz;

    u_Frustum camFrustum;
    
    vec3 eye = vec3(0.0);

    //left
    camFrustum.planes[0] = u_GetPlane(nearBottomL, farBottomL, nearTopL);

    // Right Plane
    camFrustum.planes[1] = u_GetPlane(nearTopR, farTopR, nearBottomR);

    // Top Plane
    camFrustum.planes[2] = u_GetPlane(nearTopL, farTopL, nearTopR);

    // Bottom Plane
    camFrustum.planes[3] = u_GetPlane(nearBottomR, farBottomR, nearBottomL);

    // Near Plane
    camFrustum.planes[4] = u_GetPlane(nearTopL, nearBottomR, nearBottomL);

    // Far Plane
    camFrustum.planes[5] = u_GetPlane(farTopL, farBottomL, farBottomR);
    
    uint threadId = gl_GlobalInvocationID.x;
    int instanceCountToAdd = 1;
    vec4 viewSpacePos = -inverse(cProps.invView) * vec4(meshesSpheres[threadId].center, 1.0);
    for(int i = 0; i < 5; i++){
        int idx = i;
//        vec4 viewSpacePos = -inverse(cProps.invView) * vec4(0.0, 0.0, 0.0, 1.0);
//        if(!u_SphereInsidePlane(viewSpacePos.xyz , 1.0f, camFrustum.planes[idx].xyz, camFrustum.planes[idx].w)){
//            instanceCountToAdd = 0;
//            break;
//        }
        if(distance(viewSpacePos.xyz, eye) < meshesSpheres[threadId].radius ){
            break;
        }
        if(!u_SphereInsidePlane(viewSpacePos.xyz , meshesSpheres[threadId].radius, camFrustum.planes[i].xyz, camFrustum.planes[i].w)){
            instanceCountToAdd = 0;
            break;
        }
    }
    //they point to the same dir
//    if(dot(camFrustum.planes[2].xyz, camFrustum.planes[3].xyz) > 0){
//        instanceCountToAdd = 0;
//    }
    atomicAdd(indirectCmds[threadId].instanceCount, instanceCountToAdd);
}